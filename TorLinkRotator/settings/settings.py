"""
Django settings for TorLinkRotator project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os

from . import local_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DJANGO_DOMAIN = local_config.DJANGO_DOMAIN
DJANGO_PORT = local_config.DJANGO_PORT



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = local_config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = local_config.DJANGO_DEBUG

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
]
INSTALLED_APPS += [f"TorLinkRotator.apps.{_}" for _ in [
    'rotator'
]]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'TorLinkRotator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scripts.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': local_config.DATABASE_NAME,
        'USER': local_config.DATABASE_USER,
        'PASSWORD': local_config.DATABASE_PASSWORD,
        'HOST': local_config.DATABASE_HOST,
        'PORT': local_config.DATABASE_PORT,
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler'
        },
        "file": {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            "class": "logging.FileHandler",
            "filename": "tmp/django.log", # Don't forget that the file must have permissions -rw-rw-rw-. (chmod 666)
            "formatter": "verbose",
        },
        "tor-stem-file": {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            "class": "logging.FileHandler",
            "filename": "tmp/django-tor-stem.log", # Don't forget that the file must have permissions -rw-rw-rw-. (chmod 666)
            "formatter": "verbose",
        },
    },
    "loggers": {
        'django': {
            'handlers': ['console', 'file'],            
            'propagate': True,
        },
        'tor-stem': {
            'handlers': ['console', 'tor-stem-file'],            
            'propagate': False,
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    "formatters": {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            "datefmt": "%Y-%m-%d %H:%M:%S",
            'style': '{',
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# DJANGO REST FRAMEWORK

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_THROTTLE_CLASSES': (),
    'DEFAULT_THROTTLE_RATES': {}
}
if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += ('rest_framework.renderers.BrowsableAPIRenderer', 'rest_framework.renderers.AdminRenderer')


# REDIS-SERVER
## redis://[[username]:[password]]@localhost:6379/0
## rediss://[[username]:[password]]@localhost:6379/0
## unix://[[username]:[password]]@/path/to/socket.sock?db=0

REDIS_CONFIG_URL_TEMPLATE = "{protocol}://%(auth_tml)s%(conn_tml)s{db_index}" % {
    "auth_tml": "{username}:{password}@" if local_config.REDIS_PASSWORD is not None else "",
    "conn_tml": "{hostname}:{port}/" if local_config.REDIS_PROTOCOL != "unix" else "{hostname}",
}
REDIS_CONFIG_URL_TEMPLATE_DICT = {
    "protocol": local_config.REDIS_PROTOCOL,
    "hostname": local_config.REDIS_HOST,
    "db_index": local_config.REDIS_DB_INDEX
}
if local_config.REDIS_PASSWORD is not None:
    REDIS_CONFIG_URL_TEMPLATE_DICT['username'] = local_config.REDIS_USERNAME
    REDIS_CONFIG_URL_TEMPLATE_DICT['password'] = local_config.REDIS_PASSWORD
if local_config.REDIS_PROTOCOL != "unix":
    REDIS_CONFIG_URL_TEMPLATE_DICT['port'] = local_config.REDIS_PORT

REDIS_CONFIG_URL = REDIS_CONFIG_URL_TEMPLATE.format(**REDIS_CONFIG_URL_TEMPLATE_DICT)


# CACHE

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_CONFIG_URL
    }
}


# CELERY

CELERY_IGNORE_RESULT = True

if local_config.REDIS_PROTOCOL == "unix":
    CELERY_BROKER_URL = CELERY_RESULT_BACKEND = REDIS_CONFIG_URL.replace('unix://', 'redis+socket://').replace('?db=', '?virtual_host=')
else:
    CELERY_BROKER_URL = CELERY_RESULT_BACKEND = REDIS_CONFIG_URL


# Tor

TOR_CONTROL_PORTS = local_config.TOR_CONTROL_PORTS
TOR_HIDDEN_SERVICE_PORTS = local_config.TOR_HIDDEN_SERVICE_PORTS
TOR_HIDDEN_SERVICE_EXPIRE = local_config.TOR_HIDDEN_SERVICE_EXPIRE
TOR_HIDDEN_SERVICE_FOLDER = local_config.TOR_HIDDEN_SERVICE_FOLDER
TOR_HIDDEN_SERVICE_SCHEME = local_config.TOR_HIDDEN_SERVICE_SCHEME
TOR_HIDDEN_SERVICE_MAX_STREAMS = local_config.TOR_HIDDEN_SERVICE_MAX_STREAMS
